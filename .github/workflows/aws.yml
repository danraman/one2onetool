# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "master" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: data_file
on:
 workflow_dispatch: {}
 push:
    branches:
      - "release"
      - "staging"
      
#Environmental Variables
env:
  AWS_REGION: us-east-1                           # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: assignment21jul                 # set this to your Amazon ECR repository name
  ECS_SERVICE: assignment-service                 # set this to your Amazon ECS service name
  ECS_CLUSTER: assignment-cluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: assignment-task.json       # set this to the path to your Amazon ECS task definition
                                                  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: assignment-container            # set this to the name of the container in the
                                                  # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
 codeQualityCheck:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false      
      matrix:
        language: [ 'javascript' ]
    steps:
     - name: check out the code
       uses: actions/checkout@v3
       
     - name: configure node.js for compiling
       uses: actions/setup-node@v1
       with:
         node-version:  16.x
         
     - name: list the directory contents
       run: ls -lart
       
     - name: Install dependencies
       run: npm ci
       
     - name: compile the node js application
       run: npm install    
    
     - name: Initialize CodeQL
       uses: github/codeql-action/init@v2
       with:
         queries: +security-extended
         languages: ${{ matrix.language }}

     - name: Perform CodeQL Analysis
       uses: github/codeql-action/analyze@v1
       
     - name: Send mail
       if: failure()
       uses: dawidd6/action-send-mail@v3
       with:
         server_address: smtp.mail.yahoo.com
         server_port: 465
         username: ${{secrets.MAIL_USERNAME}}
         password: ${{secrets.MAIL_PASSWORD}}
         subject: Code quality has issues in ${{ github.repository }} --  ${{job.status}}
         body: "Job completed ${{job.status}} ${{ toJson(job) }}"
         to: get.draman@gmail.com
         from: Git hub actions
 
 softwarebuild:
   needs: codeQualityCheck
   runs-on: ubuntu-latest
   steps:
     - name: check out the code                #{check out the brach to download the code }
       uses: actions/checkout@v3               # Syntax from github {,, note.. it will deffer as per scm }
       
     - name: configure node.js for compiling
       uses: actions/setup-node@v1
       with:
         node-version:  16.x                   # Compile the code with latest node.js 16.x version
         
     - name: list the directory contents        # list the currect cloned/checkout directory
       run: ls -lart
       
     - name: Install dependencies               # install npm dependencies 
       run: npm ci
       
     - name: compile the node js application
       run: npm install
       
     - name: Configure AWS credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: ${{ env.AWS_REGION }}

     - name: Login to Amazon ECR
       id: login-ecr
       uses: aws-actions/amazon-ecr-login@v1

     - name: Build, tag, and push image to Amazon ECR
       id: build-image
       env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         IMAGE_TAG: "master-one2oneapp-${{ github.sha }}"
       run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
     - name: Fill in the new image ID in the Amazon ECS task definition
       id: task-def
       uses: aws-actions/amazon-ecs-render-task-definition@v1
       with:
         task-definition: ${{ env.ECS_TASK_DEFINITION }}
         container-name: ${{ env.CONTAINER_NAME }}
         image: ${{ steps.build-image.outputs.image }}
 
     - name: Deploy Amazon ECS task definition
       uses: aws-actions/amazon-ecs-deploy-task-definition@v1
       with:
         task-definition: ${{ steps.task-def.outputs.task-definition }}
         service: ${{ env.ECS_SERVICE }}
         cluster: ${{ env.ECS_CLUSTER }}
         wait-for-service-stability: true
     - name: Send mail
       if: always()
       uses: dawidd6/action-send-mail@v3
       with:
         server_address: smtp.mail.yahoo.com
         server_port: 465
         username: ${{secrets.MAIL_USERNAME}}
         password: ${{secrets.MAIL_PASSWORD}}
         subject: Workflow completed for ${{ github.repository }} --  ${{job.status}}
         body: "Job completed ${{job.status}} ${{ toJson(job) }}"
         to: get.draman@gmail.com
         from: Git hub actions
